package indexer

import (
	"bytes"
	"context"
	"encoding/binary"
	"encoding/hex"
	"fmt"
	"github.com/btcsuite/btcd/blockchain"
	"github.com/btcsuite/btcd/btcjson"
	"github.com/btcsuite/btcd/chaincfg"
	"github.com/btcsuite/btcd/chaincfg/chainhash"
	"github.com/btcsuite/btcd/txscript"
	"github.com/btcsuite/btcd/wire"
	"github.com/darkknightbk52/btc-indexer/model"
	. "github.com/onsi/gomega"
	"testing"
	"time"
)

// Data test be referred from
// https://chain.so/block/BTCTEST/1576070
// https://chain.so/api/v2/tx/BTCTEST/373d603bd040460a973b5a5372839603d762add196a08eb37b9867de3ae858fe
// https://chain.so/api/v2/tx/BTCTEST/f32ded0974f4654bea30057db49be6a446f462fa7952c02af679f8b57539bfc8

var (
	trueValue       = true
	falseValue      = false
	maxPrevOutIndex = wire.MaxPrevOutIndex
)

var (
	rawBlocks        = make(map[int64]*wire.MsgBlock)
	rawNotifications = make(map[int64][][]byte)
	rawBlockHeaders  = make(map[int64]*btcjson.GetBlockHeaderVerboseResult)
	modelBlocks      = make(map[int64]*model.Block)
	modelTxs         = make(map[int64][]*model.Tx)
	modelTxHashes    = make(map[int64][]string)
	modelTxIns       = make(map[int64][]*model.TxIn)
	modelTxOuts      = make(map[int64][]*model.TxOut)

	reorgRawBlocks        = make(map[int64]*wire.MsgBlock)
	reorgRawNotifications = make(map[int64][][]byte)
	reorgRawBlockHeaders  = make(map[int64]*btcjson.GetBlockHeaderVerboseResult)
	reorgModelBlocks      = make(map[int64]*model.Block)
	reorgModelTxs         = make(map[int64][]*model.Tx)
	reorgModelTxHashes    = make(map[int64][]string)
	reorgModelTxIns       = make(map[int64][]*model.TxIn)
	reorgModelTxOuts      = make(map[int64][]*model.TxOut)

	validHash    = chainhash.Hash{0xfe, 0x58, 0xe8, 0x3a, 0xde, 0x67, 0x98, 0x7b, 0xb3, 0x8e, 0xa0, 0x96, 0xd1, 0xad, 0x62, 0xd7, 0x3, 0x96, 0x83, 0x72, 0x53, 0x5a, 0x3b, 0x97, 0xa, 0x46, 0x40, 0xd0, 0x3b, 0x60, 0x3d, 0x37}
	validTxHash  = "373d603bd040460a973b5a5372839603d762add196a08eb37b9867de3ae858fe"
	bobAddress   = "mrCgfoh4ZbGWLg1Lm7pcnFzWGq1fpxGURp"
	bobSigScript = []byte{0x48, 0x30, 0x45, 0x2, 0x21, 0x0, 0x93, 0xf, 0x4f, 0xdc, 0x86, 0x20, 0x5, 0x66, 0x7c, 0x78, 0x9d, 0x7a, 0xa9, 0xac, 0xbe,
		0x5a, 0xcb, 0xc8, 0x2e, 0x40, 0x30, 0x19, 0xbf, 0xd, 0x54, 0x70, 0x15, 0xb2, 0x21, 0xb4, 0xa4, 0xe7, 0x2, 0x20, 0x18, 0x26,
		0x32, 0x8e, 0x9d, 0x84, 0x42, 0x8a, 0x4f, 0x2e, 0xfb, 0x2, 0x97, 0x10, 0x60, 0xa2, 0x50, 0x14, 0x99, 0xcc, 0xb0, 0xc, 0x72,
		0x21, 0xe9, 0x79, 0x52, 0x69, 0xa4, 0x5, 0xab, 0xeb, 0x1, 0x21, 0x3, 0x6c, 0x2f, 0xe0, 0xa5, 0x69, 0x6a, 0xc5, 0xe3, 0x9f,
		0x0, 0x51, 0xb7, 0x6, 0xe8, 0x4c, 0x59, 0xb7, 0x7f, 0xfd, 0x86, 0x55, 0x8d, 0xc5, 0xde, 0xaa, 0x8a, 0x57, 0x93, 0x13, 0xc3, 0x67, 0xf9}
	aliceAddress  = "mqbHQFY4fUx9UhUxGqYcoZeUecPMLC2kiP"
	alicePkScript = []byte{0x76, 0xa9, 0x14, 0x6e, 0x82, 0xdf, 0xc, 0x50, 0xb1, 0x7d, 0xd7, 0x49, 0xdf, 0xd0, 0x6, 0xba, 0x32, 0x46, 0xa0, 0xdd, 0x1a, 0xfd, 0x75, 0x88, 0xac}
	mikeAddress   = "mhQMx7Dx5DawPHT187PNwsnqjCMsdoorRu"
	mikeSigScript = []byte{0x48, 0x30, 0x45, 0x2, 0x21, 0x0, 0xd9, 0xd5, 0x2, 0x37, 0x1, 0x7a, 0x7f, 0xaa, 0x17, 0x92, 0x6c, 0xfe, 0xaf, 0x8, 0xeb,
		0x2b, 0xb6, 0x22, 0x20, 0x5f, 0x69, 0x46, 0x19, 0xa0, 0x1e, 0xc8, 0xd4, 0x48, 0xea, 0x1c, 0x7f, 0xec, 0x2, 0x20, 0x2, 0x8, 0xb0, 0x7a, 0xd3,
		0x4b, 0x86, 0x14, 0x9e, 0x6a, 0xdf, 0x3f, 0x7, 0xd1, 0x7f, 0x30, 0x18, 0x2b, 0x3, 0x1d, 0x4e, 0x3c, 0xf5, 0xff, 0x1, 0x39, 0x42, 0x32, 0x6f,
		0xf9, 0x8, 0x5e, 0x1, 0x21, 0x3, 0x48, 0x6d, 0x8, 0x62, 0x9b, 0x41, 0xf6, 0x21, 0x56, 0xf6, 0xfb, 0xb1, 0x7a, 0x30, 0x80, 0x14, 0xd5, 0xda,
		0xfb, 0x31, 0xa0, 0xe5, 0x7f, 0x86, 0x44, 0xc3, 0x9, 0xfe, 0xd, 0xf8, 0xb0, 0x3c}
	johnAddress  = "mnN2Fk6x95ypnJGi3XTrkPrtAzPbQqqFAp"
	johnPkScript = []byte{0x76, 0xa9, 0x14, 0x4b, 0x18, 0x71, 0x4f, 0x37, 0x35, 0x0, 0xbd, 0x90, 0xf3, 0x8d, 0x6e, 0xbf, 0x2c, 0xbd, 0x6b, 0xfb, 0xa5, 0x57, 0xf9, 0x88, 0xac}
)

func InitTestData() {
	initGenesisBlock()
	initBlock1()
	initBlock2()
	initBlock3()
	initBlock4()
	initReorgBlock3(modelBlocks[2].Hash)
	initReorgBlock4(reorgModelBlocks[3].Hash)
}

func ModelBlocks() map[int64]*model.Block {
	return modelBlocks
}

func ModelTxIns() map[int64][]*model.TxIn {
	return modelTxIns
}

func ModelTxOuts() map[int64][]*model.TxOut {
	return modelTxOuts
}

func ReorgModelBlocks() map[int64]*model.Block {
	return reorgModelBlocks
}

func ReorgModelTxIns() map[int64][]*model.TxIn {
	return reorgModelTxIns
}

func ReorgModelTxOuts() map[int64][]*model.TxOut {
	return reorgModelTxOuts
}

func Addresses() []string {
	return []string{
		bobAddress,
		aliceAddress,
		mikeAddress,
		johnAddress,
	}
}

func init() {
	InitTestData()
}

func initGenesisBlock() {
	height := int64(0)
	rawBlocks[height] = &wire.MsgBlock{
		Header: wire.BlockHeader{
			Version:    0,
			PrevBlock:  chainhash.Hash{},
			MerkleRoot: chainhash.Hash{},
			Timestamp:  time.Time{},
			Bits:       0,
			Nonce:      0,
		},
		Transactions: []*wire.MsgTx{
			{
				TxIn: []*wire.TxIn{
					{
						PreviousOutPoint: wire.OutPoint{
							Hash:  chainhash.Hash{},
							Index: wire.MaxPrevOutIndex,
						},
						SignatureScript: []byte{},
						Sequence:        wire.MaxTxInSequenceNum,
					},
				},
				TxOut: []*wire.TxOut{
					{
						Value:    0x13131313,
						PkScript: alicePkScript,
					},
					{
						Value:    0x13131313,
						PkScript: johnPkScript,
					},
				},
			},
		},
	}
	modelTxHashes[height] = []string{
		"23320b96ba0c70160bcc95e7d6135109f2bfecc8114577336aefc42356caddea",
	}
	rawBlockHeaders[height] = &btcjson.GetBlockHeaderVerboseResult{
		Hash:   rawBlocks[height].BlockHash().String(),
		Height: int32(height),
	}
	modelBlocks[height] = &model.Block{
		Hash:   rawBlocks[height].BlockHash().String(),
		Height: height,
	}
	modelTxs[height] = []*model.Tx{
		{
			Height:   height,
			Hash:     modelTxHashes[height][0],
			CoinBase: &trueValue,
		},
	}
	modelTxIns[height] = []*model.TxIn{
		{
			TxHash:          modelTxHashes[height][0],
			TxIndex:         0,
			Height:          height,
			Address:         model.NonStandardAddr,
			PreviousTxHash:  chainhash.Hash{}.String(),
			PreviousTxIndex: int32(maxPrevOutIndex),
		},
	}
	modelTxOuts[height] = []*model.TxOut{
		{
			Height:       height,
			TxHash:       modelTxHashes[height][0],
			TxIndex:      0,
			Value:        0x13131313,
			Address:      aliceAddress,
			ScriptPubKey: alicePkScript,
			CoinBase:     &trueValue,
		},
		{
			Height:       height,
			TxHash:       modelTxHashes[height][0],
			TxIndex:      1,
			Value:        0x13131313,
			Address:      johnAddress,
			ScriptPubKey: johnPkScript,
			CoinBase:     &trueValue,
		},
	}
}

func initBlock1() {
	height := int64(1)
	rawBlocks[height] = &wire.MsgBlock{
		Header: wire.BlockHeader{
			Version:    0,
			PrevBlock:  chainhash.Hash{},
			MerkleRoot: chainhash.Hash{},
			Timestamp:  time.Time{},
			Bits:       0,
			Nonce:      1,
		},
		Transactions: []*wire.MsgTx{
			{
				TxIn: []*wire.TxIn{
					{
						PreviousOutPoint: wire.OutPoint{ // Just fake, not reflect correctly
							Hash:  chainhash.Hash{},
							Index: wire.MaxPrevOutIndex,
						},
						SignatureScript: bobSigScript,
						Sequence:        0,
					},
					{
						PreviousOutPoint: wire.OutPoint{ // Just fake, not reflect correctly
							Hash:  chainhash.Hash{},
							Index: wire.MaxPrevOutIndex,
						},
						SignatureScript: mikeSigScript,
						Sequence:        0,
					},
				},
				TxOut: []*wire.TxOut{
					{
						Value:    0x13131313,
						PkScript: alicePkScript,
					},
					{
						Value:    0x13131313,
						PkScript: johnPkScript,
					},
				},
			},
		},
	}
	rawNotifications[height] = [][]byte{
		{0x72, 0x61, 0x77, 0x62, 0x6c, 0x6f, 0x63, 0x6b},
		{
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x6e, 0x88, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff,
			0xff, 0xff, 0x6b, 0x48, 0x30, 0x45, 0x2, 0x21, 0x0, 0x93, 0xf, 0x4f, 0xdc, 0x86, 0x20, 0x5, 0x66, 0x7c, 0x78, 0x9d, 0x7a, 0xa9, 0xac, 0xbe, 0x5a, 0xcb,
			0xc8, 0x2e, 0x40, 0x30, 0x19, 0xbf, 0xd, 0x54, 0x70, 0x15, 0xb2, 0x21, 0xb4, 0xa4, 0xe7, 0x2, 0x20, 0x18, 0x26, 0x32, 0x8e, 0x9d, 0x84, 0x42, 0x8a,
			0x4f, 0x2e, 0xfb, 0x2, 0x97, 0x10, 0x60, 0xa2, 0x50, 0x14, 0x99, 0xcc, 0xb0, 0xc, 0x72, 0x21, 0xe9, 0x79, 0x52, 0x69, 0xa4, 0x5, 0xab, 0xeb, 0x1, 0x21,
			0x3, 0x6c, 0x2f, 0xe0, 0xa5, 0x69, 0x6a, 0xc5, 0xe3, 0x9f, 0x0, 0x51, 0xb7, 0x6, 0xe8, 0x4c, 0x59, 0xb7, 0x7f, 0xfd, 0x86, 0x55, 0x8d, 0xc5, 0xde, 0xaa,
			0x8a, 0x57, 0x93, 0x13, 0xc3, 0x67, 0xf9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x6b, 0x48, 0x30, 0x45, 0x2, 0x21, 0x0, 0xd9, 0xd5, 0x2,
			0x37, 0x1, 0x7a, 0x7f, 0xaa, 0x17, 0x92, 0x6c, 0xfe, 0xaf, 0x8, 0xeb, 0x2b, 0xb6, 0x22, 0x20, 0x5f, 0x69, 0x46, 0x19, 0xa0, 0x1e, 0xc8, 0xd4, 0x48, 0xea,
			0x1c, 0x7f, 0xec, 0x2, 0x20, 0x2, 0x8, 0xb0, 0x7a, 0xd3, 0x4b, 0x86, 0x14, 0x9e, 0x6a, 0xdf, 0x3f, 0x7, 0xd1, 0x7f, 0x30, 0x18, 0x2b, 0x3, 0x1d, 0x4e,
			0x3c, 0xf5, 0xff, 0x1, 0x39, 0x42, 0x32, 0x6f, 0xf9, 0x8, 0x5e, 0x1, 0x21, 0x3, 0x48, 0x6d, 0x8, 0x62, 0x9b, 0x41, 0xf6, 0x21, 0x56, 0xf6, 0xfb, 0xb1,
			0x7a, 0x30, 0x80, 0x14, 0xd5, 0xda, 0xfb, 0x31, 0xa0, 0xe5, 0x7f, 0x86, 0x44, 0xc3, 0x9, 0xfe, 0xd, 0xf8, 0xb0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x2, 0x13, 0x13,
			0x13, 0x13, 0x0, 0x0, 0x0, 0x0, 0x19, 0x76, 0xa9, 0x14, 0x6e, 0x82, 0xdf, 0xc, 0x50, 0xb1, 0x7d, 0xd7, 0x49, 0xdf, 0xd0, 0x6, 0xba, 0x32, 0x46, 0xa0,
			0xdd, 0x1a, 0xfd, 0x75, 0x88, 0xac, 0x13, 0x13, 0x13, 0x13, 0x0, 0x0, 0x0, 0x0, 0x19, 0x76, 0xa9, 0x14, 0x4b, 0x18, 0x71, 0x4f, 0x37, 0x35, 0x0, 0xbd,
			0x90, 0xf3, 0x8d, 0x6e, 0xbf, 0x2c, 0xbd, 0x6b, 0xfb, 0xa5, 0x57, 0xf9, 0x88, 0xac, 0x0, 0x0, 0x0, 0x0,
		},
		{0xd, 0x0, 0x0, 0x0},
	}
	modelTxHashes[height] = []string{
		"7ac2979bb5af6a22773ce6a4436cfa28623550f2d249e7f7455754e9e5df104b",
	}
	rawBlockHeaders[height] = &btcjson.GetBlockHeaderVerboseResult{
		Hash:         rawBlocks[height].BlockHash().String(),
		Height:       int32(height),
		PreviousHash: rawBlockHeaders[height-1].Hash,
	}
	modelBlocks[height] = &model.Block{
		Hash:         rawBlocks[height].BlockHash().String(),
		Height:       height,
		PreviousHash: rawBlockHeaders[height-1].Hash,
	}
	modelTxs[height] = []*model.Tx{
		{
			Height:   height,
			Hash:     modelTxHashes[height][0],
			CoinBase: &falseValue,
		},
	}
	modelTxIns[height] = []*model.TxIn{
		{
			TxHash:          modelTxHashes[height][0],
			TxIndex:         0,
			Height:          height,
			Address:         bobAddress,
			PreviousTxHash:  chainhash.Hash{}.String(),
			PreviousTxIndex: int32(maxPrevOutIndex),
		},
		{
			TxHash:          modelTxHashes[height][0],
			TxIndex:         1,
			Height:          height,
			Address:         mikeAddress,
			PreviousTxHash:  chainhash.Hash{}.String(),
			PreviousTxIndex: int32(maxPrevOutIndex),
		},
	}
	modelTxOuts[height] = []*model.TxOut{
		{
			Height:       height,
			TxHash:       modelTxHashes[height][0],
			TxIndex:      0,
			Value:        0x13131313,
			Address:      aliceAddress,
			ScriptPubKey: alicePkScript,
			CoinBase:     &falseValue,
		},
		{
			Height:       height,
			TxHash:       modelTxHashes[height][0],
			TxIndex:      1,
			Value:        0x13131313,
			Address:      johnAddress,
			ScriptPubKey: johnPkScript,
			CoinBase:     &falseValue,
		},
	}
}

func initBlock2() {
	height := int64(2)
	rawBlocks[height] = &wire.MsgBlock{
		Header: wire.BlockHeader{
			Version:    0,
			PrevBlock:  chainhash.Hash{},
			MerkleRoot: chainhash.Hash{},
			Timestamp:  time.Time{},
			Bits:       0,
			Nonce:      2,
		},
		Transactions: []*wire.MsgTx{
			{
				TxIn: []*wire.TxIn{
					{
						PreviousOutPoint: wire.OutPoint{ // Just fake, not reflect correctly
							Hash:  validHash,
							Index: 13,
						},
						SignatureScript: bobSigScript,
						Sequence:        0,
					},
				},
				TxOut: []*wire.TxOut{
					{
						Value:    0x13131313,
						PkScript: alicePkScript,
					},
				},
			},
			{
				TxIn: []*wire.TxIn{
					{
						PreviousOutPoint: wire.OutPoint{ // Just fake, not reflect correctly
							Hash:  validHash,
							Index: 13,
						},
						SignatureScript: mikeSigScript,
						Sequence:        0,
					},
				},
				TxOut: []*wire.TxOut{
					{
						Value:    0x13131313,
						PkScript: johnPkScript,
					},
				},
			},
		},
	}
	rawNotifications[height] = [][]byte{
		{0x72, 0x61, 0x77, 0x62, 0x6c, 0x6f, 0x63, 0x6b},
		{
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x9, 0x6e, 0x88, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x1, 0xfe, 0x58, 0xe8, 0x3a, 0xde, 0x67, 0x98, 0x7b, 0xb3, 0x8e,
			0xa0, 0x96, 0xd1, 0xad, 0x62, 0xd7, 0x3, 0x96, 0x83, 0x72, 0x53, 0x5a, 0x3b, 0x97, 0xa, 0x46, 0x40, 0xd0, 0x3b, 0x60, 0x3d, 0x37, 0xd, 0x0, 0x0, 0x0, 0x6b, 0x48,
			0x30, 0x45, 0x2, 0x21, 0x0, 0x93, 0xf, 0x4f, 0xdc, 0x86, 0x20, 0x5, 0x66, 0x7c, 0x78, 0x9d, 0x7a, 0xa9, 0xac, 0xbe, 0x5a, 0xcb, 0xc8, 0x2e, 0x40, 0x30, 0x19, 0xbf,
			0xd, 0x54, 0x70, 0x15, 0xb2, 0x21, 0xb4, 0xa4, 0xe7, 0x2, 0x20, 0x18, 0x26, 0x32, 0x8e, 0x9d, 0x84, 0x42, 0x8a, 0x4f, 0x2e, 0xfb, 0x2, 0x97, 0x10, 0x60, 0xa2, 0x50,
			0x14, 0x99, 0xcc, 0xb0, 0xc, 0x72, 0x21, 0xe9, 0x79, 0x52, 0x69, 0xa4, 0x5, 0xab, 0xeb, 0x1, 0x21, 0x3, 0x6c, 0x2f, 0xe0, 0xa5, 0x69, 0x6a, 0xc5, 0xe3, 0x9f, 0x0,
			0x51, 0xb7, 0x6, 0xe8, 0x4c, 0x59, 0xb7, 0x7f, 0xfd, 0x86, 0x55, 0x8d, 0xc5, 0xde, 0xaa, 0x8a, 0x57, 0x93, 0x13, 0xc3, 0x67, 0xf9, 0x0, 0x0, 0x0, 0x0, 0x1, 0x13,
			0x13, 0x13, 0x13, 0x0, 0x0, 0x0, 0x0, 0x19, 0x76, 0xa9, 0x14, 0x6e, 0x82, 0xdf, 0xc, 0x50, 0xb1, 0x7d, 0xd7, 0x49, 0xdf, 0xd0, 0x6, 0xba, 0x32, 0x46, 0xa0, 0xdd,
			0x1a, 0xfd, 0x75, 0x88, 0xac, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xfe, 0x58, 0xe8, 0x3a, 0xde, 0x67, 0x98, 0x7b, 0xb3, 0x8e, 0xa0, 0x96, 0xd1, 0xad, 0x62,
			0xd7, 0x3, 0x96, 0x83, 0x72, 0x53, 0x5a, 0x3b, 0x97, 0xa, 0x46, 0x40, 0xd0, 0x3b, 0x60, 0x3d, 0x37, 0xd, 0x0, 0x0, 0x0, 0x6b, 0x48, 0x30, 0x45, 0x2, 0x21, 0x0, 0xd9,
			0xd5, 0x2, 0x37, 0x1, 0x7a, 0x7f, 0xaa, 0x17, 0x92, 0x6c, 0xfe, 0xaf, 0x8, 0xeb, 0x2b, 0xb6, 0x22, 0x20, 0x5f, 0x69, 0x46, 0x19, 0xa0, 0x1e, 0xc8, 0xd4, 0x48, 0xea,
			0x1c, 0x7f, 0xec, 0x2, 0x20, 0x2, 0x8, 0xb0, 0x7a, 0xd3, 0x4b, 0x86, 0x14, 0x9e, 0x6a, 0xdf, 0x3f, 0x7, 0xd1, 0x7f, 0x30, 0x18, 0x2b, 0x3, 0x1d, 0x4e, 0x3c, 0xf5,
			0xff, 0x1, 0x39, 0x42, 0x32, 0x6f, 0xf9, 0x8, 0x5e, 0x1, 0x21, 0x3, 0x48, 0x6d, 0x8, 0x62, 0x9b, 0x41, 0xf6, 0x21, 0x56, 0xf6, 0xfb, 0xb1, 0x7a, 0x30, 0x80, 0x14,
			0xd5, 0xda, 0xfb, 0x31, 0xa0, 0xe5, 0x7f, 0x86, 0x44, 0xc3, 0x9, 0xfe, 0xd, 0xf8, 0xb0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x1, 0x13, 0x13, 0x13, 0x13, 0x0, 0x0, 0x0, 0x0,
			0x19, 0x76, 0xa9, 0x14, 0x4b, 0x18, 0x71, 0x4f, 0x37, 0x35, 0x0, 0xbd, 0x90, 0xf3, 0x8d, 0x6e, 0xbf, 0x2c, 0xbd, 0x6b, 0xfb, 0xa5, 0x57, 0xf9, 0x88, 0xac, 0x0, 0x0,
			0x0, 0x0,
		},
		{0xd, 0x0, 0x0, 0x0},
	}
	modelTxHashes[height] = []string{
		"b38029a8f55296cd783d038f060f3697c6c43925e661f7778199ca63ef7155c8",
		"07db5cb1626c629c46ebabe8776d612309cc43197bfe94580f36beaa52c98302",
	}
	rawBlockHeaders[height] = &btcjson.GetBlockHeaderVerboseResult{
		Hash:         rawBlocks[height].BlockHash().String(),
		Height:       int32(height),
		PreviousHash: rawBlockHeaders[height-1].Hash,
	}
	modelBlocks[height] = &model.Block{
		Hash:         rawBlocks[height].BlockHash().String(),
		Height:       height,
		PreviousHash: rawBlockHeaders[height-1].Hash,
	}
	modelTxs[height] = []*model.Tx{
		{
			Height:   height,
			Hash:     modelTxHashes[height][0],
			CoinBase: &falseValue,
		},
		{
			Height:   height,
			Hash:     modelTxHashes[height][1],
			CoinBase: &falseValue,
		},
	}
	modelTxIns[height] = []*model.TxIn{
		{
			TxHash:          modelTxHashes[height][0],
			TxIndex:         0,
			Height:          height,
			Address:         bobAddress,
			PreviousTxHash:  validTxHash,
			PreviousTxIndex: 13,
		},
		{
			TxHash:          modelTxHashes[height][1],
			TxIndex:         0,
			Height:          height,
			Address:         mikeAddress,
			PreviousTxHash:  validTxHash,
			PreviousTxIndex: 13,
		},
	}
	modelTxOuts[height] = []*model.TxOut{
		{
			Height:       height,
			TxHash:       modelTxHashes[height][0],
			TxIndex:      0,
			Value:        0x13131313,
			Address:      aliceAddress,
			ScriptPubKey: alicePkScript,
			CoinBase:     &falseValue,
		},
		{
			Height:       height,
			TxHash:       modelTxHashes[height][1],
			TxIndex:      0,
			Value:        0x13131313,
			Address:      johnAddress,
			ScriptPubKey: johnPkScript,
			CoinBase:     &falseValue,
		},
	}
}

func initBlock3() {
	height := int64(3)
	rawBlocks[height] = &wire.MsgBlock{
		Header: wire.BlockHeader{
			Version:    0,
			PrevBlock:  chainhash.Hash{},
			MerkleRoot: chainhash.Hash{},
			Timestamp:  time.Time{},
			Bits:       0,
			Nonce:      3,
		},
		Transactions: []*wire.MsgTx{
			{
				TxIn: []*wire.TxIn{
					{
						PreviousOutPoint: wire.OutPoint{ // Just fake, not reflect correctly
							Hash:  validHash,
							Index: 13,
						},
						SignatureScript: bobSigScript,
						Sequence:        0,
					},
					{
						PreviousOutPoint: wire.OutPoint{ // Just fake, not reflect correctly
							Hash:  validHash,
							Index: 13,
						},
						SignatureScript: mikeSigScript,
						Sequence:        0,
					},
				},
				TxOut: []*wire.TxOut{
					{
						Value:    0x13131313,
						PkScript: alicePkScript,
					},
					{
						Value:    0x13131313,
						PkScript: johnPkScript,
					},
				},
			},
		},
	}
	rawNotifications[height] = [][]byte{
		{0x72, 0x61, 0x77, 0x62, 0x6c, 0x6f, 0x63, 0x6b},
		{
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x6e, 0x88, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x2, 0xfe, 0x58, 0xe8, 0x3a, 0xde, 0x67, 0x98, 0x7b,
			0xb3, 0x8e, 0xa0, 0x96, 0xd1, 0xad, 0x62, 0xd7, 0x3, 0x96, 0x83, 0x72, 0x53, 0x5a, 0x3b, 0x97, 0xa, 0x46, 0x40, 0xd0, 0x3b, 0x60, 0x3d, 0x37, 0xd, 0x0, 0x0, 0x0,
			0x6b, 0x48, 0x30, 0x45, 0x2, 0x21, 0x0, 0x93, 0xf, 0x4f, 0xdc, 0x86, 0x20, 0x5, 0x66, 0x7c, 0x78, 0x9d, 0x7a, 0xa9, 0xac, 0xbe, 0x5a, 0xcb, 0xc8, 0x2e, 0x40,
			0x30, 0x19, 0xbf, 0xd, 0x54, 0x70, 0x15, 0xb2, 0x21, 0xb4, 0xa4, 0xe7, 0x2, 0x20, 0x18, 0x26, 0x32, 0x8e, 0x9d, 0x84, 0x42, 0x8a, 0x4f, 0x2e, 0xfb, 0x2, 0x97,
			0x10, 0x60, 0xa2, 0x50, 0x14, 0x99, 0xcc, 0xb0, 0xc, 0x72, 0x21, 0xe9, 0x79, 0x52, 0x69, 0xa4, 0x5, 0xab, 0xeb, 0x1, 0x21, 0x3, 0x6c, 0x2f, 0xe0, 0xa5, 0x69,
			0x6a, 0xc5, 0xe3, 0x9f, 0x0, 0x51, 0xb7, 0x6, 0xe8, 0x4c, 0x59, 0xb7, 0x7f, 0xfd, 0x86, 0x55, 0x8d, 0xc5, 0xde, 0xaa, 0x8a, 0x57, 0x93, 0x13, 0xc3, 0x67, 0xf9,
			0x0, 0x0, 0x0, 0x0, 0xfe, 0x58, 0xe8, 0x3a, 0xde, 0x67, 0x98, 0x7b, 0xb3, 0x8e, 0xa0, 0x96, 0xd1, 0xad, 0x62, 0xd7, 0x3, 0x96, 0x83, 0x72, 0x53, 0x5a, 0x3b, 0x97,
			0xa, 0x46, 0x40, 0xd0, 0x3b, 0x60, 0x3d, 0x37, 0xd, 0x0, 0x0, 0x0, 0x6b, 0x48, 0x30, 0x45, 0x2, 0x21, 0x0, 0xd9, 0xd5, 0x2, 0x37, 0x1, 0x7a, 0x7f, 0xaa, 0x17,
			0x92, 0x6c, 0xfe, 0xaf, 0x8, 0xeb, 0x2b, 0xb6, 0x22, 0x20, 0x5f, 0x69, 0x46, 0x19, 0xa0, 0x1e, 0xc8, 0xd4, 0x48, 0xea, 0x1c, 0x7f, 0xec, 0x2, 0x20, 0x2, 0x8, 0xb0,
			0x7a, 0xd3, 0x4b, 0x86, 0x14, 0x9e, 0x6a, 0xdf, 0x3f, 0x7, 0xd1, 0x7f, 0x30, 0x18, 0x2b, 0x3, 0x1d, 0x4e, 0x3c, 0xf5, 0xff, 0x1, 0x39, 0x42, 0x32, 0x6f, 0xf9, 0x8,
			0x5e, 0x1, 0x21, 0x3, 0x48, 0x6d, 0x8, 0x62, 0x9b, 0x41, 0xf6, 0x21, 0x56, 0xf6, 0xfb, 0xb1, 0x7a, 0x30, 0x80, 0x14, 0xd5, 0xda, 0xfb, 0x31, 0xa0, 0xe5, 0x7f, 0x86,
			0x44, 0xc3, 0x9, 0xfe, 0xd, 0xf8, 0xb0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x2, 0x13, 0x13, 0x13, 0x13, 0x0, 0x0, 0x0, 0x0, 0x19, 0x76, 0xa9, 0x14, 0x6e, 0x82, 0xdf, 0xc,
			0x50, 0xb1, 0x7d, 0xd7, 0x49, 0xdf, 0xd0, 0x6, 0xba, 0x32, 0x46, 0xa0, 0xdd, 0x1a, 0xfd, 0x75, 0x88, 0xac, 0x13, 0x13, 0x13, 0x13, 0x0, 0x0, 0x0, 0x0, 0x19, 0x76,
			0xa9, 0x14, 0x4b, 0x18, 0x71, 0x4f, 0x37, 0x35, 0x0, 0xbd, 0x90, 0xf3, 0x8d, 0x6e, 0xbf, 0x2c, 0xbd, 0x6b, 0xfb, 0xa5, 0x57, 0xf9, 0x88, 0xac, 0x0, 0x0, 0x0, 0x0,
		},
		{0xd, 0x0, 0x0, 0x0},
	}
	modelTxHashes[height] = []string{
		"487e14ee3f9b376a82c367554eafe7c075f85e9b3bd59a5161c10b71e1a3f14f",
	}
	rawBlockHeaders[height] = &btcjson.GetBlockHeaderVerboseResult{
		Hash:         rawBlocks[height].BlockHash().String(),
		Height:       int32(height),
		PreviousHash: rawBlockHeaders[height-1].Hash,
	}
	modelBlocks[height] = &model.Block{
		Hash:         rawBlocks[height].BlockHash().String(),
		Height:       height,
		PreviousHash: rawBlockHeaders[height-1].Hash,
	}
	modelTxs[height] = []*model.Tx{
		{
			Height:   height,
			Hash:     modelTxHashes[height][0],
			CoinBase: &falseValue,
		},
	}
	modelTxIns[height] = []*model.TxIn{
		{
			TxHash:          modelTxHashes[height][0],
			TxIndex:         0,
			Height:          height,
			Address:         bobAddress,
			PreviousTxHash:  validTxHash,
			PreviousTxIndex: 13,
		},
		{
			TxHash:          modelTxHashes[height][0],
			TxIndex:         1,
			Height:          height,
			Address:         mikeAddress,
			PreviousTxHash:  validTxHash,
			PreviousTxIndex: 13,
		},
	}
	modelTxOuts[height] = []*model.TxOut{
		{
			Height:       height,
			TxHash:       modelTxHashes[height][0],
			TxIndex:      0,
			Value:        0x13131313,
			Address:      aliceAddress,
			ScriptPubKey: alicePkScript,
			CoinBase:     &falseValue,
		},
		{
			Height:       height,
			TxHash:       modelTxHashes[height][0],
			TxIndex:      1,
			Value:        0x13131313,
			Address:      johnAddress,
			ScriptPubKey: johnPkScript,
			CoinBase:     &falseValue,
		},
	}
}

func initBlock4() {
	height := int64(4)
	rawBlocks[height] = &wire.MsgBlock{
		Header: wire.BlockHeader{
			Version:    0,
			PrevBlock:  chainhash.Hash{},
			MerkleRoot: chainhash.Hash{},
			Timestamp:  time.Time{},
			Bits:       0,
			Nonce:      4,
		},
		Transactions: []*wire.MsgTx{
			{
				TxIn: []*wire.TxIn{
					{
						PreviousOutPoint: wire.OutPoint{ // Just fake, not reflect correctly
							Hash:  validHash,
							Index: 13,
						},
						SignatureScript: bobSigScript,
						Sequence:        10,
					},
				},
				TxOut: []*wire.TxOut{
					{
						Value:    0x13131313,
						PkScript: alicePkScript,
					},
				},
			},
			{
				TxIn: []*wire.TxIn{
					{
						PreviousOutPoint: wire.OutPoint{ // Just fake, not reflect correctly
							Hash:  validHash,
							Index: 13,
						},
						SignatureScript: mikeSigScript,
						Sequence:        10,
					},
				},
				TxOut: []*wire.TxOut{
					{
						Value:    0x13131313,
						PkScript: johnPkScript,
					},
				},
			},
		},
	}
	rawNotifications[height] = [][]byte{
		{0x72, 0x61, 0x77, 0x62, 0x6c, 0x6f, 0x63, 0x6b},
		{
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x6e, 0x88, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x1, 0xfe, 0x58, 0xe8, 0x3a, 0xde,
			0x67, 0x98, 0x7b, 0xb3, 0x8e, 0xa0, 0x96, 0xd1, 0xad, 0x62, 0xd7, 0x3, 0x96, 0x83, 0x72, 0x53, 0x5a, 0x3b, 0x97, 0xa, 0x46, 0x40, 0xd0, 0x3b, 0x60, 0x3d,
			0x37, 0xd, 0x0, 0x0, 0x0, 0x6b, 0x48, 0x30, 0x45, 0x2, 0x21, 0x0, 0x93, 0xf, 0x4f, 0xdc, 0x86, 0x20, 0x5, 0x66, 0x7c, 0x78, 0x9d, 0x7a, 0xa9, 0xac, 0xbe,
			0x5a, 0xcb, 0xc8, 0x2e, 0x40, 0x30, 0x19, 0xbf, 0xd, 0x54, 0x70, 0x15, 0xb2, 0x21, 0xb4, 0xa4, 0xe7, 0x2, 0x20, 0x18, 0x26, 0x32, 0x8e, 0x9d, 0x84, 0x42,
			0x8a, 0x4f, 0x2e, 0xfb, 0x2, 0x97, 0x10, 0x60, 0xa2, 0x50, 0x14, 0x99, 0xcc, 0xb0, 0xc, 0x72, 0x21, 0xe9, 0x79, 0x52, 0x69, 0xa4, 0x5, 0xab, 0xeb, 0x1,
			0x21, 0x3, 0x6c, 0x2f, 0xe0, 0xa5, 0x69, 0x6a, 0xc5, 0xe3, 0x9f, 0x0, 0x51, 0xb7, 0x6, 0xe8, 0x4c, 0x59, 0xb7, 0x7f, 0xfd, 0x86, 0x55, 0x8d, 0xc5, 0xde,
			0xaa, 0x8a, 0x57, 0x93, 0x13, 0xc3, 0x67, 0xf9, 0xa, 0x0, 0x0, 0x0, 0x1, 0x13, 0x13, 0x13, 0x13, 0x0, 0x0, 0x0, 0x0, 0x19, 0x76, 0xa9, 0x14, 0x6e, 0x82,
			0xdf, 0xc, 0x50, 0xb1, 0x7d, 0xd7, 0x49, 0xdf, 0xd0, 0x6, 0xba, 0x32, 0x46, 0xa0, 0xdd, 0x1a, 0xfd, 0x75, 0x88, 0xac, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x1, 0xfe, 0x58, 0xe8, 0x3a, 0xde, 0x67, 0x98, 0x7b, 0xb3, 0x8e, 0xa0, 0x96, 0xd1, 0xad, 0x62, 0xd7, 0x3, 0x96, 0x83, 0x72, 0x53, 0x5a, 0x3b, 0x97,
			0xa, 0x46, 0x40, 0xd0, 0x3b, 0x60, 0x3d, 0x37, 0xd, 0x0, 0x0, 0x0, 0x6b, 0x48, 0x30, 0x45, 0x2, 0x21, 0x0, 0xd9, 0xd5, 0x2, 0x37, 0x1, 0x7a, 0x7f, 0xaa,
			0x17, 0x92, 0x6c, 0xfe, 0xaf, 0x8, 0xeb, 0x2b, 0xb6, 0x22, 0x20, 0x5f, 0x69, 0x46, 0x19, 0xa0, 0x1e, 0xc8, 0xd4, 0x48, 0xea, 0x1c, 0x7f, 0xec, 0x2, 0x20,
			0x2, 0x8, 0xb0, 0x7a, 0xd3, 0x4b, 0x86, 0x14, 0x9e, 0x6a, 0xdf, 0x3f, 0x7, 0xd1, 0x7f, 0x30, 0x18, 0x2b, 0x3, 0x1d, 0x4e, 0x3c, 0xf5, 0xff, 0x1, 0x39,
			0x42, 0x32, 0x6f, 0xf9, 0x8, 0x5e, 0x1, 0x21, 0x3, 0x48, 0x6d, 0x8, 0x62, 0x9b, 0x41, 0xf6, 0x21, 0x56, 0xf6, 0xfb, 0xb1, 0x7a, 0x30, 0x80, 0x14, 0xd5,
			0xda, 0xfb, 0x31, 0xa0, 0xe5, 0x7f, 0x86, 0x44, 0xc3, 0x9, 0xfe, 0xd, 0xf8, 0xb0, 0x3c, 0xa, 0x0, 0x0, 0x0, 0x1, 0x13, 0x13, 0x13, 0x13, 0x0, 0x0, 0x0,
			0x0, 0x19, 0x76, 0xa9, 0x14, 0x4b, 0x18, 0x71, 0x4f, 0x37, 0x35, 0x0, 0xbd, 0x90, 0xf3, 0x8d, 0x6e, 0xbf, 0x2c, 0xbd, 0x6b, 0xfb, 0xa5, 0x57, 0xf9, 0x88,
			0xac, 0x0, 0x0, 0x0, 0x0,
		},
		{0xd, 0x0, 0x0, 0x0},
	}
	modelTxHashes[height] = []string{
		"c78e5bbbf8faf457ad3f8ad1944318739168f5fd130c5aa94ae5e30562c601a0",
		"3b25267efac7d9b43a227c9692822ad06d75ed2dc871962b72e03fad72c0160c",
	}
	rawBlockHeaders[height] = &btcjson.GetBlockHeaderVerboseResult{
		Hash:         rawBlocks[height].BlockHash().String(),
		Height:       int32(height),
		PreviousHash: rawBlockHeaders[height-1].Hash,
	}
	modelBlocks[height] = &model.Block{
		Hash:         rawBlocks[height].BlockHash().String(),
		Height:       height,
		PreviousHash: rawBlockHeaders[height-1].Hash,
	}
	modelTxs[height] = []*model.Tx{
		{
			Height:   height,
			Hash:     modelTxHashes[height][0],
			CoinBase: &falseValue,
		},
		{
			Height:   height,
			Hash:     modelTxHashes[height][1],
			CoinBase: &falseValue,
		},
	}
	modelTxIns[height] = []*model.TxIn{
		{
			TxHash:          modelTxHashes[height][0],
			TxIndex:         0,
			Height:          height,
			Address:         bobAddress,
			PreviousTxHash:  validTxHash,
			PreviousTxIndex: 13,
		},
		{
			TxHash:          modelTxHashes[height][1],
			TxIndex:         0,
			Height:          height,
			Address:         mikeAddress,
			PreviousTxHash:  validTxHash,
			PreviousTxIndex: 13,
		},
	}
	modelTxOuts[height] = []*model.TxOut{
		{
			Height:       height,
			TxHash:       modelTxHashes[height][0],
			TxIndex:      0,
			Value:        0x13131313,
			Address:      aliceAddress,
			ScriptPubKey: alicePkScript,
			CoinBase:     &falseValue,
		},
		{
			Height:       height,
			TxHash:       modelTxHashes[height][1],
			TxIndex:      0,
			Value:        0x13131313,
			Address:      johnAddress,
			ScriptPubKey: johnPkScript,
			CoinBase:     &falseValue,
		},
	}
}

func initReorgBlock3(previousHash string) {
	height := int64(3)
	reorgRawBlocks[height] = &wire.MsgBlock{
		Header: wire.BlockHeader{
			Version:    0,
			PrevBlock:  chainhash.Hash{},
			MerkleRoot: chainhash.Hash{},
			Timestamp:  time.Time{},
			Bits:       0,
			Nonce:      113,
		},
		Transactions: []*wire.MsgTx{
			{
				TxIn: []*wire.TxIn{
					{
						PreviousOutPoint: wire.OutPoint{ // Just fake, not reflect correctly
							Hash:  validHash,
							Index: 13,
						},
						SignatureScript: bobSigScript,
						Sequence:        113,
					},
				},
				TxOut: []*wire.TxOut{
					{
						Value:    0x13131313,
						PkScript: alicePkScript,
					},
				},
			},
		},
	}
	reorgRawNotifications[height] = [][]byte{
		{0x72, 0x61, 0x77, 0x62, 0x6c, 0x6f, 0x63, 0x6b},
		{
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x6e, 0x88, 0x0, 0x0, 0x0, 0x0, 0x71, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0xfe, 0x58, 0xe8, 0x3a, 0xde,
			0x67, 0x98, 0x7b, 0xb3, 0x8e, 0xa0, 0x96, 0xd1, 0xad, 0x62, 0xd7, 0x3, 0x96, 0x83, 0x72, 0x53, 0x5a, 0x3b, 0x97, 0xa, 0x46, 0x40, 0xd0, 0x3b, 0x60, 0x3d,
			0x37, 0xd, 0x0, 0x0, 0x0, 0x6b, 0x48, 0x30, 0x45, 0x2, 0x21, 0x0, 0x93, 0xf, 0x4f, 0xdc, 0x86, 0x20, 0x5, 0x66, 0x7c, 0x78, 0x9d, 0x7a, 0xa9, 0xac, 0xbe,
			0x5a, 0xcb, 0xc8, 0x2e, 0x40, 0x30, 0x19, 0xbf, 0xd, 0x54, 0x70, 0x15, 0xb2, 0x21, 0xb4, 0xa4, 0xe7, 0x2, 0x20, 0x18, 0x26, 0x32, 0x8e, 0x9d, 0x84, 0x42,
			0x8a, 0x4f, 0x2e, 0xfb, 0x2, 0x97, 0x10, 0x60, 0xa2, 0x50, 0x14, 0x99, 0xcc, 0xb0, 0xc, 0x72, 0x21, 0xe9, 0x79, 0x52, 0x69, 0xa4, 0x5, 0xab, 0xeb, 0x1,
			0x21, 0x3, 0x6c, 0x2f, 0xe0, 0xa5, 0x69, 0x6a, 0xc5, 0xe3, 0x9f, 0x0, 0x51, 0xb7, 0x6, 0xe8, 0x4c, 0x59, 0xb7, 0x7f, 0xfd, 0x86, 0x55, 0x8d, 0xc5, 0xde,
			0xaa, 0x8a, 0x57, 0x93, 0x13, 0xc3, 0x67, 0xf9, 0x71, 0x0, 0x0, 0x0, 0x1, 0x13, 0x13, 0x13, 0x13, 0x0, 0x0, 0x0, 0x0, 0x19, 0x76, 0xa9, 0x14, 0x6e, 0x82,
			0xdf, 0xc, 0x50, 0xb1, 0x7d, 0xd7, 0x49, 0xdf, 0xd0, 0x6, 0xba, 0x32, 0x46, 0xa0, 0xdd, 0x1a, 0xfd, 0x75, 0x88, 0xac, 0x0, 0x0, 0x0, 0x0,
		},
		{0xd, 0x0, 0x0, 0x0},
	}
	reorgModelTxHashes[height] = []string{
		"bfd8114b6238d3356d9f66ea652a304f3603a2d1a510b2d1b8d5b760dafe281d",
	}
	reorgRawBlockHeaders[height] = &btcjson.GetBlockHeaderVerboseResult{
		Hash:         reorgRawBlocks[height].BlockHash().String(),
		Height:       int32(height),
		PreviousHash: previousHash,
	}
	reorgModelBlocks[height] = &model.Block{
		Hash:         reorgRawBlocks[height].BlockHash().String(),
		Height:       height,
		PreviousHash: previousHash,
	}
	reorgModelTxs[height] = []*model.Tx{
		{
			Height:   height,
			Hash:     reorgModelTxHashes[height][0],
			CoinBase: &falseValue,
		},
	}
	reorgModelTxIns[height] = []*model.TxIn{
		{
			TxHash:          reorgModelTxHashes[height][0],
			TxIndex:         0,
			Height:          height,
			Address:         bobAddress,
			PreviousTxHash:  validTxHash,
			PreviousTxIndex: 13,
		},
	}
	reorgModelTxOuts[height] = []*model.TxOut{
		{
			Height:       height,
			TxHash:       reorgModelTxHashes[height][0],
			TxIndex:      0,
			Value:        0x13131313,
			Address:      aliceAddress,
			ScriptPubKey: alicePkScript,
			CoinBase:     &falseValue,
		},
	}
}

func initReorgBlock4(previousHash string) {
	height := int64(4)
	reorgRawBlocks[height] = &wire.MsgBlock{
		Header: wire.BlockHeader{
			Version:    0,
			PrevBlock:  chainhash.Hash{},
			MerkleRoot: chainhash.Hash{},
			Timestamp:  time.Time{},
			Bits:       0,
			Nonce:      13,
		},
		Transactions: []*wire.MsgTx{
			{
				TxIn: []*wire.TxIn{
					{
						PreviousOutPoint: wire.OutPoint{ // Just fake, not reflect correctly
							Hash:  validHash,
							Index: 13,
						},
						SignatureScript: bobSigScript,
						Sequence:        13,
					},
					{
						PreviousOutPoint: wire.OutPoint{ // Just fake, not reflect correctly
							Hash:  validHash,
							Index: 13,
						},
						SignatureScript: mikeSigScript,
						Sequence:        13,
					},
				},
				TxOut: []*wire.TxOut{
					{
						Value:    0x13131313,
						PkScript: alicePkScript,
					},
					{
						Value:    0x13131313,
						PkScript: johnPkScript,
					},
				},
			},
		},
	}
	reorgRawNotifications[height] = [][]byte{
		{0x72, 0x61, 0x77, 0x62, 0x6c, 0x6f, 0x63, 0x6b},
		{
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x6e, 0x88, 0x0, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x2, 0xfe, 0x58, 0xe8, 0x3a, 0xde,
			0x67, 0x98, 0x7b, 0xb3, 0x8e, 0xa0, 0x96, 0xd1, 0xad, 0x62, 0xd7, 0x3, 0x96, 0x83, 0x72, 0x53, 0x5a, 0x3b, 0x97, 0xa, 0x46, 0x40, 0xd0, 0x3b, 0x60, 0x3d,
			0x37, 0xd, 0x0, 0x0, 0x0, 0x6b, 0x48, 0x30, 0x45, 0x2, 0x21, 0x0, 0x93, 0xf, 0x4f, 0xdc, 0x86, 0x20, 0x5, 0x66, 0x7c, 0x78, 0x9d, 0x7a, 0xa9, 0xac, 0xbe,
			0x5a, 0xcb, 0xc8, 0x2e, 0x40, 0x30, 0x19, 0xbf, 0xd, 0x54, 0x70, 0x15, 0xb2, 0x21, 0xb4, 0xa4, 0xe7, 0x2, 0x20, 0x18, 0x26, 0x32, 0x8e, 0x9d, 0x84, 0x42,
			0x8a, 0x4f, 0x2e, 0xfb, 0x2, 0x97, 0x10, 0x60, 0xa2, 0x50, 0x14, 0x99, 0xcc, 0xb0, 0xc, 0x72, 0x21, 0xe9, 0x79, 0x52, 0x69, 0xa4, 0x5, 0xab, 0xeb, 0x1,
			0x21, 0x3, 0x6c, 0x2f, 0xe0, 0xa5, 0x69, 0x6a, 0xc5, 0xe3, 0x9f, 0x0, 0x51, 0xb7, 0x6, 0xe8, 0x4c, 0x59, 0xb7, 0x7f, 0xfd, 0x86, 0x55, 0x8d, 0xc5, 0xde,
			0xaa, 0x8a, 0x57, 0x93, 0x13, 0xc3, 0x67, 0xf9, 0xd, 0x0, 0x0, 0x0, 0xfe, 0x58, 0xe8, 0x3a, 0xde, 0x67, 0x98, 0x7b, 0xb3, 0x8e, 0xa0, 0x96, 0xd1, 0xad,
			0x62, 0xd7, 0x3, 0x96, 0x83, 0x72, 0x53, 0x5a, 0x3b, 0x97, 0xa, 0x46, 0x40, 0xd0, 0x3b, 0x60, 0x3d, 0x37, 0xd, 0x0, 0x0, 0x0, 0x6b, 0x48, 0x30, 0x45, 0x2,
			0x21, 0x0, 0xd9, 0xd5, 0x2, 0x37, 0x1, 0x7a, 0x7f, 0xaa, 0x17, 0x92, 0x6c, 0xfe, 0xaf, 0x8, 0xeb, 0x2b, 0xb6, 0x22, 0x20, 0x5f, 0x69, 0x46, 0x19, 0xa0,
			0x1e, 0xc8, 0xd4, 0x48, 0xea, 0x1c, 0x7f, 0xec, 0x2, 0x20, 0x2, 0x8, 0xb0, 0x7a, 0xd3, 0x4b, 0x86, 0x14, 0x9e, 0x6a, 0xdf, 0x3f, 0x7, 0xd1, 0x7f, 0x30,
			0x18, 0x2b, 0x3, 0x1d, 0x4e, 0x3c, 0xf5, 0xff, 0x1, 0x39, 0x42, 0x32, 0x6f, 0xf9, 0x8, 0x5e, 0x1, 0x21, 0x3, 0x48, 0x6d, 0x8, 0x62, 0x9b, 0x41, 0xf6, 0x21,
			0x56, 0xf6, 0xfb, 0xb1, 0x7a, 0x30, 0x80, 0x14, 0xd5, 0xda, 0xfb, 0x31, 0xa0, 0xe5, 0x7f, 0x86, 0x44, 0xc3, 0x9, 0xfe, 0xd, 0xf8, 0xb0, 0x3c, 0xd, 0x0, 0x0,
			0x0, 0x2, 0x13, 0x13, 0x13, 0x13, 0x0, 0x0, 0x0, 0x0, 0x19, 0x76, 0xa9, 0x14, 0x6e, 0x82, 0xdf, 0xc, 0x50, 0xb1, 0x7d, 0xd7, 0x49, 0xdf, 0xd0, 0x6, 0xba,
			0x32, 0x46, 0xa0, 0xdd, 0x1a, 0xfd, 0x75, 0x88, 0xac, 0x13, 0x13, 0x13, 0x13, 0x0, 0x0, 0x0, 0x0, 0x19, 0x76, 0xa9, 0x14, 0x4b, 0x18, 0x71, 0x4f, 0x37, 0x35,
			0x0, 0xbd, 0x90, 0xf3, 0x8d, 0x6e, 0xbf, 0x2c, 0xbd, 0x6b, 0xfb, 0xa5, 0x57, 0xf9, 0x88, 0xac, 0x0, 0x0, 0x0, 0x0,
		},
		{0xd, 0x0, 0x0, 0x0},
	}
	reorgModelTxHashes[height] = []string{
		"3f63a3d9d7c5e72b3474391b1d0b9efd40db1a30c16e9e503d9e15d6e126b009",
	}
	reorgRawBlockHeaders[height] = &btcjson.GetBlockHeaderVerboseResult{
		Hash:         reorgRawBlocks[height].BlockHash().String(),
		Height:       int32(height),
		PreviousHash: previousHash,
	}
	reorgModelBlocks[height] = &model.Block{
		Hash:         reorgRawBlocks[height].BlockHash().String(),
		Height:       height,
		PreviousHash: previousHash,
	}
	reorgModelTxs[height] = []*model.Tx{
		{
			Height:   height,
			Hash:     reorgModelTxHashes[height][0],
			CoinBase: &falseValue,
		},
	}
	reorgModelTxIns[height] = []*model.TxIn{
		{
			TxHash:          reorgModelTxHashes[height][0],
			TxIndex:         0,
			Height:          height,
			Address:         bobAddress,
			PreviousTxHash:  validTxHash,
			PreviousTxIndex: 13,
		},
		{
			TxHash:          reorgModelTxHashes[height][0],
			TxIndex:         1,
			Height:          height,
			Address:         mikeAddress,
			PreviousTxHash:  validTxHash,
			PreviousTxIndex: 13,
		},
	}
	reorgModelTxOuts[height] = []*model.TxOut{
		{
			Height:       height,
			TxHash:       reorgModelTxHashes[height][0],
			TxIndex:      0,
			Value:        0x13131313,
			Address:      aliceAddress,
			ScriptPubKey: alicePkScript,
			CoinBase:     &falseValue,
		},
		{
			Height:       height,
			TxHash:       reorgModelTxHashes[height][0],
			TxIndex:      1,
			Value:        0x13131313,
			Address:      johnAddress,
			ScriptPubKey: johnPkScript,
			CoinBase:     &falseValue,
		},
	}
}

func initReorgBlock5(previousHash string) {
	height := int64(5)
	reorgRawBlocks[height] = &wire.MsgBlock{
		Header: wire.BlockHeader{
			Version:    0,
			PrevBlock:  chainhash.Hash{},
			MerkleRoot: chainhash.Hash{},
			Timestamp:  time.Time{},
			Bits:       0,
			Nonce:      14,
		},
		Transactions: []*wire.MsgTx{
			{
				TxIn: []*wire.TxIn{
					{
						PreviousOutPoint: wire.OutPoint{ // Just fake, not reflect correctly
							Hash:  validHash,
							Index: 13,
						},
						SignatureScript: bobSigScript,
						Sequence:        14,
					},
				},
				TxOut: []*wire.TxOut{
					{
						Value:    0x13131313,
						PkScript: alicePkScript,
					},
				},
			},
			{
				TxIn: []*wire.TxIn{
					{
						PreviousOutPoint: wire.OutPoint{ // Just fake, not reflect correctly
							Hash:  validHash,
							Index: 13,
						},
						SignatureScript: mikeSigScript,
						Sequence:        14,
					},
				},
				TxOut: []*wire.TxOut{
					{
						Value:    0x13131313,
						PkScript: johnPkScript,
					},
				},
			},
		},
	}
	reorgRawNotifications[height] = [][]byte{
		{0x72, 0x61, 0x77, 0x62, 0x6c, 0x6f, 0x63, 0x6b},
		{
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x6e, 0x88, 0x0, 0x0, 0x0, 0x0, 0xe, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x1, 0xfe, 0x58, 0xe8,
			0x3a, 0xde, 0x67, 0x98, 0x7b, 0xb3, 0x8e, 0xa0, 0x96, 0xd1, 0xad, 0x62, 0xd7, 0x3, 0x96, 0x83, 0x72, 0x53, 0x5a, 0x3b, 0x97, 0xa, 0x46, 0x40, 0xd0,
			0x3b, 0x60, 0x3d, 0x37, 0xd, 0x0, 0x0, 0x0, 0x6b, 0x48, 0x30, 0x45, 0x2, 0x21, 0x0, 0x93, 0xf, 0x4f, 0xdc, 0x86, 0x20, 0x5, 0x66, 0x7c, 0x78, 0x9d,
			0x7a, 0xa9, 0xac, 0xbe, 0x5a, 0xcb, 0xc8, 0x2e, 0x40, 0x30, 0x19, 0xbf, 0xd, 0x54, 0x70, 0x15, 0xb2, 0x21, 0xb4, 0xa4, 0xe7, 0x2, 0x20, 0x18, 0x26,
			0x32, 0x8e, 0x9d, 0x84, 0x42, 0x8a, 0x4f, 0x2e, 0xfb, 0x2, 0x97, 0x10, 0x60, 0xa2, 0x50, 0x14, 0x99, 0xcc, 0xb0, 0xc, 0x72, 0x21, 0xe9, 0x79, 0x52,
			0x69, 0xa4, 0x5, 0xab, 0xeb, 0x1, 0x21, 0x3, 0x6c, 0x2f, 0xe0, 0xa5, 0x69, 0x6a, 0xc5, 0xe3, 0x9f, 0x0, 0x51, 0xb7, 0x6, 0xe8, 0x4c, 0x59, 0xb7, 0x7f,
			0xfd, 0x86, 0x55, 0x8d, 0xc5, 0xde, 0xaa, 0x8a, 0x57, 0x93, 0x13, 0xc3, 0x67, 0xf9, 0xe, 0x0, 0x0, 0x0, 0x1, 0x13, 0x13, 0x13, 0x13, 0x0, 0x0, 0x0,
			0x0, 0x19, 0x76, 0xa9, 0x14, 0x6e, 0x82, 0xdf, 0xc, 0x50, 0xb1, 0x7d, 0xd7, 0x49, 0xdf, 0xd0, 0x6, 0xba, 0x32, 0x46, 0xa0, 0xdd, 0x1a, 0xfd, 0x75,
			0x88, 0xac, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xfe, 0x58, 0xe8, 0x3a, 0xde, 0x67, 0x98, 0x7b, 0xb3, 0x8e, 0xa0, 0x96, 0xd1, 0xad, 0x62,
			0xd7, 0x3, 0x96, 0x83, 0x72, 0x53, 0x5a, 0x3b, 0x97, 0xa, 0x46, 0x40, 0xd0, 0x3b, 0x60, 0x3d, 0x37, 0xd, 0x0, 0x0, 0x0, 0x6b, 0x48, 0x30, 0x45, 0x2,
			0x21, 0x0, 0xd9, 0xd5, 0x2, 0x37, 0x1, 0x7a, 0x7f, 0xaa, 0x17, 0x92, 0x6c, 0xfe, 0xaf, 0x8, 0xeb, 0x2b, 0xb6, 0x22, 0x20, 0x5f, 0x69, 0x46, 0x19,
			0xa0, 0x1e, 0xc8, 0xd4, 0x48, 0xea, 0x1c, 0x7f, 0xec, 0x2, 0x20, 0x2, 0x8, 0xb0, 0x7a, 0xd3, 0x4b, 0x86, 0x14, 0x9e, 0x6a, 0xdf, 0x3f, 0x7, 0xd1,
			0x7f, 0x30, 0x18, 0x2b, 0x3, 0x1d, 0x4e, 0x3c, 0xf5, 0xff, 0x1, 0x39, 0x42, 0x32, 0x6f, 0xf9, 0x8, 0x5e, 0x1, 0x21, 0x3, 0x48, 0x6d, 0x8, 0x62,
			0x9b, 0x41, 0xf6, 0x21, 0x56, 0xf6, 0xfb, 0xb1, 0x7a, 0x30, 0x80, 0x14, 0xd5, 0xda, 0xfb, 0x31, 0xa0, 0xe5, 0x7f, 0x86, 0x44, 0xc3, 0x9, 0xfe, 0xd,
			0xf8, 0xb0, 0x3c, 0xe, 0x0, 0x0, 0x0, 0x1, 0x13, 0x13, 0x13, 0x13, 0x0, 0x0, 0x0, 0x0, 0x19, 0x76, 0xa9, 0x14, 0x4b, 0x18, 0x71, 0x4f, 0x37, 0x35,
			0x0, 0xbd, 0x90, 0xf3, 0x8d, 0x6e, 0xbf, 0x2c, 0xbd, 0x6b, 0xfb, 0xa5, 0x57, 0xf9, 0x88, 0xac, 0x0, 0x0, 0x0, 0x0,
		},
		{0xd, 0x0, 0x0, 0x0},
	}
	reorgModelTxHashes[height] = []string{
		"79aa0c5cf61e97b509f2aef7bd897a2bc80f87482e54b2a2a1a30a47aa7afec2",
		"5d57573a8cc01dc2d88d3d5cd8ff749b1525ee239a56218651735a3f03b886d9",
	}
	reorgRawBlockHeaders[height] = &btcjson.GetBlockHeaderVerboseResult{
		Hash:         reorgRawBlocks[height].BlockHash().String(),
		Height:       int32(height),
		PreviousHash: previousHash,
	}
	reorgModelBlocks[height] = &model.Block{
		Hash:         reorgRawBlocks[height].BlockHash().String(),
		Height:       height,
		PreviousHash: previousHash,
	}
	reorgModelTxs[height] = []*model.Tx{
		{
			Height:   height,
			Hash:     reorgModelTxHashes[height][0],
			CoinBase: &falseValue,
		},
		{
			Height:   height,
			Hash:     reorgModelTxHashes[height][1],
			CoinBase: &falseValue,
		},
	}
	reorgModelTxIns[height] = []*model.TxIn{
		{
			TxHash:          reorgModelTxHashes[height][0],
			TxIndex:         0,
			Height:          height,
			Address:         bobAddress,
			PreviousTxHash:  validTxHash,
			PreviousTxIndex: 13,
		},
		{
			TxHash:          reorgModelTxHashes[height][1],
			TxIndex:         0,
			Height:          height,
			Address:         mikeAddress,
			PreviousTxHash:  validTxHash,
			PreviousTxIndex: 13,
		},
	}
	reorgModelTxOuts[height] = []*model.TxOut{
		{
			Height:       height,
			TxHash:       reorgModelTxHashes[height][0],
			TxIndex:      0,
			Value:        0x13131313,
			Address:      aliceAddress,
			ScriptPubKey: alicePkScript,
			CoinBase:     &falseValue,
		},
		{
			Height:       height,
			TxHash:       reorgModelTxHashes[height][1],
			TxIndex:      0,
			Value:        0x13131313,
			Address:      johnAddress,
			ScriptPubKey: johnPkScript,
			CoinBase:     &falseValue,
		},
	}
}

func TestGeneratePkScript(t *testing.T) {
	RegisterTestingT(t)
	h, _ := hex.DecodeString("76a9144b18714f373500bd90f38d6ebf2cbd6bfba557f988ac")
	for _, b := range h {
		fmt.Printf("%x\n", b)
	}
	_, addr, _, _ := txscript.ExtractPkScriptAddrs(johnPkScript, &chaincfg.TestNet3Params)
	Expect(len(addr)).Should(Equal(1))
	Expect(addr[0].String()).Should(Equal(johnAddress))
}

func TestGenerateSigScript(t *testing.T) {
	RegisterTestingT(t)

	h, _ := hex.DecodeString("483045022100d9d50237017a7faa17926cfeaf08eb2bb622205f694619a01ec8d448ea1c7fec02200208b07ad34b86149e6adf3f07d17f30182b031d4e3cf5ff013942326ff9085e012103486d08629b41f62156f6fbb17a308014d5dafb31a0e57f8644c309fe0df8b03c")
	for _, b := range h {
		fmt.Printf("%x\n", b)
	}
	pkScript, err := txscript.ComputePkScript([]byte{}, nil)
	if err != nil {
		t.Fatal(err)
	}

	_, _, _, err = txscript.ExtractPkScriptAddrs(pkScript.Script(), &chaincfg.TestNet3Params)
	if err != nil {
		t.Fatal(err)
	}

	addr, _ := pkScript.Address(&chaincfg.TestNet3Params)
	Expect(addr.String()).Should(Equal(mikeAddress))
}

func TestGenerateTxHash(t *testing.T) {
	rawTx := wire.MsgTx{
		TxIn: []*wire.TxIn{
			{
				PreviousOutPoint: wire.OutPoint{ // Just fake, not reflect correctly
					Hash:  validHash,
					Index: 13,
				},
				SignatureScript: bobSigScript,
				Sequence:        113,
			},
		},
		TxOut: []*wire.TxOut{
			{
				Value:    0x13131313,
				PkScript: alicePkScript,
			},
		},
	}
	h := rawTx.TxHash()
	fmt.Println(h.String())
	fmt.Println("isCoinBase", blockchain.IsCoinBaseTx(&rawTx))
}

func TestSerializeNotification(t *testing.T) {
	RegisterTestingT(t)

	wireMsg := make([][]byte, 3)
	wireMsg[0] = []byte("rawblock")
	var buf bytes.Buffer
	err := reorgRawBlocks[3].Serialize(&buf)
	wireMsg[1] = buf.Bytes()
	Expect(err).Should(Succeed())
	b := make([]byte, 4)
	binary.LittleEndian.PutUint32(b, 13)
	wireMsg[2] = b
	for _, arr := range wireMsg {
		fmt.Println("===")
		for _, b := range arr {
			fmt.Printf("%x\n", b)
		}
	}

	ctx, cancel := context.WithCancel(context.Background())
	ch := make(chan interface{}, 1)
	go func() {
		noti := <-ch
		msg, ok := noti.([][]byte)
		Expect(ok).Should(BeTrue())
		Expect(len(msg)).Should(Equal(3))
		Expect(string(msg[0])).Should(Equal("rawblock"))
		rawBlock := new(wire.MsgBlock)
		err := rawBlock.Deserialize(bytes.NewBuffer(msg[1]))
		Expect(err).Should(Succeed())
		for _, tx := range rawBlock.Transactions {
			for _, v := range tx.TxIn {
				fmt.Println("TxIn", v)
			}
		}
		cancel()
	}()

	ch <- wireMsg

	<-ctx.Done()
}

func TestGetBlockHash(t *testing.T) {
	fmt.Println("Raw Blocks")
	for height, b := range rawBlocks {
		fmt.Println("height:", height, "-hash:", b.BlockHash().String())
	}
	fmt.Println("Reorg Raw Blocks")
	for height, b := range reorgRawBlocks {
		fmt.Println("height:", height, "-hash:", b.BlockHash().String())
	}
}
