// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: srv/btc-indexer/proto/btc-indexer.proto

/*
Package btcindexersrv is a generated protocol buffer package.

It is generated from these files:
	srv/btc-indexer/proto/btc-indexer.proto

It has these top-level messages:
	SyncRequest
	SyncResponse
	Block
	TxIn
	TxOut
*/
package btcindexersrv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BtcIndexer service

type BtcIndexerService interface {
	Sync(ctx context.Context, opts ...client.CallOption) (BtcIndexer_SyncService, error)
}

type btcIndexerService struct {
	c    client.Client
	name string
}

func NewBtcIndexerService(name string, c client.Client) BtcIndexerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "btcindexersrv"
	}
	return &btcIndexerService{
		c:    c,
		name: name,
	}
}

func (c *btcIndexerService) Sync(ctx context.Context, opts ...client.CallOption) (BtcIndexer_SyncService, error) {
	req := c.c.NewRequest(c.name, "BtcIndexer.Sync", &SyncRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &btcIndexerServiceSync{stream}, nil
}

type BtcIndexer_SyncService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SyncRequest) error
	Recv() (*SyncResponse, error)
}

type btcIndexerServiceSync struct {
	stream client.Stream
}

func (x *btcIndexerServiceSync) Close() error {
	return x.stream.Close()
}

func (x *btcIndexerServiceSync) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *btcIndexerServiceSync) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *btcIndexerServiceSync) Send(m *SyncRequest) error {
	return x.stream.Send(m)
}

func (x *btcIndexerServiceSync) Recv() (*SyncResponse, error) {
	m := new(SyncResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BtcIndexer service

type BtcIndexerHandler interface {
	Sync(context.Context, BtcIndexer_SyncStream) error
}

func RegisterBtcIndexerHandler(s server.Server, hdlr BtcIndexerHandler, opts ...server.HandlerOption) error {
	type btcIndexer interface {
		Sync(ctx context.Context, stream server.Stream) error
	}
	type BtcIndexer struct {
		btcIndexer
	}
	h := &btcIndexerHandler{hdlr}
	return s.Handle(s.NewHandler(&BtcIndexer{h}, opts...))
}

type btcIndexerHandler struct {
	BtcIndexerHandler
}

func (h *btcIndexerHandler) Sync(ctx context.Context, stream server.Stream) error {
	return h.BtcIndexerHandler.Sync(ctx, &btcIndexerSyncStream{stream})
}

type BtcIndexer_SyncStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SyncResponse) error
	Recv() (*SyncRequest, error)
}

type btcIndexerSyncStream struct {
	stream server.Stream
}

func (x *btcIndexerSyncStream) Close() error {
	return x.stream.Close()
}

func (x *btcIndexerSyncStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *btcIndexerSyncStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *btcIndexerSyncStream) Send(m *SyncResponse) error {
	return x.stream.Send(m)
}

func (x *btcIndexerSyncStream) Recv() (*SyncRequest, error) {
	m := new(SyncRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
